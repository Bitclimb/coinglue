#!/usr/bin/env node

const util = require('util');
const path = require('path');
const fs = require('fs-extra');
const logdir = '/var/log/coinglue';
const hdir = path.resolve(__dirname, '../');
const coinhookpath = path.resolve(__dirname, 'coinhook');
const execFile = util.promisify(require('child_process').execFile);
const appendFile = util.promisify(fs.appendFile);
require('app-module-path').addPath(`${hdir}/`);
const rpc = require('src/rpc/connect');
const errlog = path.resolve(logdir, `coinblock_${Date.now()}.err`);
const user = process.env.USER;

if (process.argv.length < 5) {
  fs.appendFileSync(errlog, `[${user}] Got ${process.argv.length} arguments (not 5)`);
  process.exit(1);
}
const BLOCKHASH = process.argv[2];
const COIN = process.argv[3];
const SECRET = process.argv[4];
const logfile = path.resolve(logdir, `coinblock_${COIN}.log`);
fs.ensureFileSync(logfile);

const log = async (msg, type = 'LOG') => {
  await appendFile(logfile, `[${user}] [${new Date()}] [${type}] ${msg}\n`);
};

const [r, fam] = rpc.connect(COIN);

const batchGetTxOutputs = async txids => {
  try {
    if (!txids.length) {
      return false;
    }
    const batch = txids.map(txid => ({
      method: 'gettransaction',
      parameters: [txid]
    }));
    await log(`Batch request for ${txids.length} transactions`);
    let transaction = await r.cmd(batch);
    transaction = transaction.filter(tx => {
      return !tx.code && tx.code !== -5;
    });
    if (!transaction.length) {
      return false;
    }
    transaction = [...new Set(transaction.map(txs => txs.txid))];
    return transaction;
  } catch (err) {
    await log(err.stack || err.message, 'ERROR');
    return false;
  }
};
const scanblock = async () => {
  if (fam == 'btc') {
    await log(`${BLOCKHASH} ${COIN}`);
    const blkinfo = await r.cmd('getblock', BLOCKHASH, 1);
    const txidarr = await batchGetTxOutputs(blkinfo.tx);
    if (!txidarr || !txidarr.length) {
      await log('No useful transactions to process');
    } else {
      for (const txid of txidarr) {
        await execFile(coinhookpath, [txid, COIN, SECRET]);
      }
    }
  }
};
scanblock().then().catch(err => {
  console.error('coinblock error', err.stack || err.message);
});
