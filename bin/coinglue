#!/usr/bin/env node

const path = require('path');
process.env.CGDIR = path.resolve(__dirname, '../');
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
require('app-module-path').addPath(`${process.env.CGDIR}/`);

const fs = require('fs-extra');
const bipc = require('bitclimb-ipc');
const sock = bipc.socket('sub');
/* console */
require('src/lib/logger')(console, true, true);
/* main modules */
const pkgjson = require('../package.json');

const program = require('commander');
const { spawn } = require('child_process');
const checkProc = require('build/checkProcess');

program
  .usage('<actions> [options]')
  .version(pkgjson.version);

program
  .command('start')
  .description('starts the wallet service')
  .action(async () => {
    const subProc = await _start();
    if (subProc) {
      subProc.on('message', ([code, msg]) => {
        if (code == 0) {
          subProc.unref();
          console.info(msg);
          process.exit();
        } else if (code == 1) {
          console.info(msg);
        } else if (code == 2) {
          console.warn(msg);
        }
      });
    } else {
      console.error('Sorry only once instance of this wallet is allowed');
    }
  });
program
  .command('stop')
  .alias('kill')
  .description('stops the wallet service')
  .action(async () => {
    const isStop = await _stop();
    if (isStop) {
      console.info('Wallet service stopped');
    } else {
      console.info('Wallet service is not running');
    }
  });
program
  .command('clear')
  .alias('reset')
  .description('clears all configurations,seeds,and database. Dangerous! Use with care!')
  .action(async () => {
    await _stop();
    await Promise.all([fs.remove(`${process.env.CGDIR}/.logs`),
      fs.remove(`${process.env.CGDIR}/src/config/dev/seed.js`),
      fs.remove(`${process.env.CGDIR}/src/config/prod/seed.js`),
      fs.remove(`${process.env.CGDIR}/src/config/general/`),
      fs.remove(`${process.env.CGDIR}/src/services/dev/`),
      fs.remove(`${process.env.CGDIR}/src/services/prod/`)
    ]);

    console.info('Reset finished. Restart the wallet service.');
  });
program
  .command('add')
  .description('add a new coin')
  .action(async () => {
    await _stop();
    const c = require('build/checkCoins');
    await c._add();
    console.info('Restart the Wallet service.');
  });
program
  .command('removecoin')
  .description('remove a coin')
  .action(async () => {
    await _stop();
    const c = require('build/checkCoins');
    await c._remove();
    console.log('Restart the Wallet service.');
  });
program
  .command('hook')
  .description('add/replace hook config')
  .action(async () => {
    await _stop();
    const c = require('build/checkHook');
    await c.setHook();
    console.info('Restart the Wallet service.');
  });
program
  .command('rpc')
  .description('add/replace rpc config')
  .action(async () => {
    await _stop();
    const c = require('build/checkRpcSecure');
    await c.setRpc();
    console.info('Restart the Wallet service.');
  });

program
  .command('list')
  .description('list all added coins')
  .action(async () => {
    const c = require('src/config/general/coins.js');
    console.info(Object.keys(c));
  });
program
  .command('restart')
  .alias('reload')
  .description('restarts/reloads the wallet service')
  .action(async () => {
    await _stop();
    await _start();
    console.info('Wallet service restarted');
  });
program
  .command('logs')
  .description('prints out the wallet service logs')
  .action(async () => {
    const pid = await _status();
    if (pid) {
      _logs();
    } else {
      console.info('Wallet serivce is not running');
    }
  });
program
  .command('status')
  .description('display the status of the wallet service')
  .action(async () => {
    const pid = await _status();
    if (pid) {
      console.info('Wallet serivce is running on PID', pid);
    } else {
      console.info('Wallet serivce is not running');
    }
  });

program.parse(process.argv);

if (program.args.length === 0) {
  program.help();
}

/* Actions */

async function _start () {
  try {
    const isrunning = await checkProc('coinglue');
    if (isrunning) {
      return false;
    }
    require('build/checkRpcSecure').check();
    const checkseed = await require('build/checkSeed')();
    const checkcoins = await require('build/checkCoins').check();
    const checkhook = await require('build/checkHook').check();
    if (checkseed && checkcoins && checkhook) {
      const subopts = {
        env: process.env,
        windowsHide: true,
        cwd: process.env.CGDIR,
        detached: true,
        stdio: ['ipc', process.stdout, process.stderr]
      };
      const jsfile = ['--expose-gc', 'index.js'];
      const subprocess = spawn('node', jsfile, subopts);
      await fs.outputFile('/tmp/coinglue.pid', subprocess.pid);

      return subprocess;
    } else {
      return false;
    }
  } catch (err) {
    console.error(err.stack || err.message);
    process.exit(1);
  }
}

async function _status () {
  try {
    const pid = await checkProc('coinglue');
    return pid;
  } catch (err) {
    console.error(err.stack || err.message);
    process.exit(1);
  }
}

async function _stop () {
  try {
    const pid = await checkProc('coinglue');
    if (!pid) {
      return false;
    }
    process.nextTick(() => {
      process.kill(pid, 'SIGHUP');
    });
    return true;
  } catch (err) {
    console.error(err.stack || err.message);
    process.exit(1);
  }
}

function _logs () {
  const sockpath = '/tmp/coinglue_log.sock';
  sock.connect(sockpath, err => {
    if (err) throw new Error(err);
  });
  sock.on('message', (topic, msg) => {
    msg = JSON.parse(msg);
    console[topic](msg.msg);
  });
}
